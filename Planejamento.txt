typedef struct{
	int *Adress; (Para ligar a lista)
	int num; (numero na lista)
	char nome[100]; (nome do item, o que vai aparecer)
	int tipo; (Define se há saída, se é ingrediente final, se é easter egg, etc.)
	char info [1000]; (Descrição, clique direito)
	img; (como colocar isso? nome da imagem, pra chamar 'img'.jpg?)
	formul; (O mesmo)
} item;

--------------------------------------------------------------------------------------------------------

main(){

	init_addons

	intro
		init_intro
		animação(fade in, rest(1~2), fade out)(usar som)
		destroy intro

	start_menu_principal
    		enquanto sair = false

    			-iniciar jogo
        			destroy_menu_principal
				seleciona_fase
       		 			start_fase

			-créditos(colocar animação?)
      				load_creditos(imagem)
				if(clicar em voltar)
				destroy_creditos
				voltar p/menu	
        
  			  -sair
    				 sair = true
     	 			 realmente sair?
      	 			 destroy_menu_principal
      	 			 fechar jogo
}

start_fase
	carregar elementos
		abre arquivo start(número da fase).txt
		while(não encontrar --)
			procurar no arquivo stage(no caso só do prólogo, para testar) pelo elemento
			carregar informações na lista de elementos iniciais
		
		carregar objetivo
		carregar reagentes

	while (1){
		ação do player
			clica em um elemento >> copia para in1
			clica em outro elemento >> copia para in2
	
		preencheu dois espaços DE TIPO 1 || mudou reagente com dois espaços preenchidos de tipo 1 >> carrega lista de checagem
			procura na lista pelos elementos ordenados: Menor, maior.
			carrega lista de checagens
			se houver uma combinação, carregar elemento(s) de saída e (se houver) bonus.
		(como chamar os easter eggs?)
	
		se encontrou na lista a combinação >> preenche saída 		/*(se a reação não der nenhum resultado, avisar?)*/
			adiciona na lista de elementos a serem usados
		
			clicar em saída >> adiciona elemento
				se o resultado for o objetivo, libera botão de terminar fase (caso player decida procurar easter eggs ou ver as informações sobre o elemento final)
				clicou em botão de completar fase >> return ;
	
		se não encontrou depois de 16 vezes, notificar de que há ajuda disponível. (se descobrir novo elemento, reseta o contador)

	}

--------------------------------------------------------------------------------------------------------

\* a = in1, b = in2, c = aux, e outs abaixo identicos aos de fora*\

void checagem(char *a, char *b, char *c, char *out1, char *out2){ 
    int x =0, n;
    while (x < 2){
        if(a == bla && b == blo && c = clic)
            Escrever em out1, out2;
            \*Se esta combinação tem bonus*\
            (Escrever bonus direto na lista)


        ...
        [Todas as checagens]
        ...

        n = a;
        a = b;
        b = n;  
        x++;
    }
}


void add list(char *v){
 - procura string na lista
    (se achar) - não fazer nada.
    (se chegar em FIM) - adicionar.

}

--------------------------------------------------------------------------------------------------------

Matriz [2][n] para menu de reagentes.

2 espaços em cima = in1, in2;
2 abaixo = out1, out2;
Reagente selecionado = aux;

Contador para ajudar na inserção da lista?

Algumas dicas/definições no inicio da fase? Baseado em tempo, erros, ou padrão?
Contador de erros no default da checagem?

--------------------------------------------------------------------------------------------------------
//Formatação p/ entradas de texto

-Um txt pra carregar elementos
	nº
	nº
	nº
	.
	.
	.
	-(fim)

-Outro com TODOS os dados da struct
	numero do elemento/n
	nome/n
	tipo
	texto info
	img do elemento
	img/formula
	- (final)
	repete...

-lista de checagem
	duas entradas + reagente, duas saídas
	´.´ para vazio
	´-´ para final de reação
